/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package parsers;

import Utilites.MultimediaSearcher;
import usersettings.SettingsLoader;
import datadef.FileImpl;
import datadef.TrackPointImpl;
import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.sanselan.ImageReadException;
import org.apache.sanselan.Sanselan;
import org.apache.sanselan.common.IImageMetadata;
import org.apache.sanselan.formats.jpeg.JpegImageMetadata;
import org.apache.sanselan.formats.tiff.TiffField;
import org.apache.sanselan.formats.tiff.TiffImageMetadata;
import org.apache.sanselan.formats.tiff.constants.TiffConstants;
import org.jdesktop.application.Action;
import parsers.utilities.ElevationLoaderMapQuest;

/**
 * Trieda s grafickými a funkcionálnimy prvkami modulu G7T Parser
 * @author Matej Pazdič
 */
public class G7tParser extends javax.swing.JFrame {

    private File destFolder;
    private File g7tFile;
    private String path = null;
    private String searchPath = null;
    private DateFormat form = new SimpleDateFormat("MMM dd HH:mm:ss yyyy", Locale.ENGLISH);
    private DateFormat formEU = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
    private String os = System.getProperty("os.name");
    private boolean doneSearching = false;
    private static ArrayList<String> latitude = new ArrayList<String>();
    private static ArrayList<String> longitude = new ArrayList<String>();
    private static ArrayList<String> deviceElevation = new ArrayList<String>();
    private static ArrayList<String> serverElevation = null;
    private static ArrayList<Date> time = new ArrayList<Date>();
    private ArrayList<FileImpl> files = new ArrayList<FileImpl>();
    private ArrayList<TrackPointImpl> track = new ArrayList<TrackPointImpl>();
    private ElevationLoaderMapQuest elevationLoader = new ElevationLoaderMapQuest();
    private Thread thread1 = new Thread(new getElevationsFromURL());
    private Thread thread = new Thread(new searchMultimediaFilesFromPC());
    private boolean isLoadedElevationsFromServer = false;
    private String trackType;
    private int timeZone = 0;
    private String daylightSaving = "non-daylight";

    /**
     * Konstruktor triedy G7TParser
     */
    public G7tParser() {
        initComponents();

        jProgressBar1.setVisible(false);
        jLabel4.setVisible(false);

        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jButton7.setEnabled(false);
        jButton8.setEnabled(false);
        jTextField2.setEnabled(false);
        jTextField3.setEnabled(false);
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(false);
        jSpinner1.setEnabled(false);
        jToggleButton1.setEnabled(false);
        jToggleButton2.setEnabled(false);
        jToggleButton3.setEnabled(false);
        jToggleButton4.setEnabled(false);
        jToggleButton5.setEnabled(false);
        jToggleButton6.setEnabled(false);
        jToggleButton7.setEnabled(false);
        jToggleButton8.setEnabled(false);
        jToggleButton9.setEnabled(false);
        jToggleButton10.setEnabled(false);
        jComboBox2.setEnabled(false);
        jRadioButton1.setEnabled(false);
        jRadioButton2.setEnabled(false);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jButton8 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton10 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        jToggleButton8 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton9 = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JSeparator();
        jToggleButton4 = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        jToggleButton5 = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mapps.MAPPSApp.class).getContext().getResourceMap(G7tParser.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        jTextField1.setEditable(false);
        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(mapps.MAPPSApp.class).getContext().getActionMap(G7tParser.class, this);
        jButton1.setAction(actionMap.get("openFile")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("selectDestination")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jTextField2.setEditable(false);
        jTextField2.setText(resourceMap.getString("jTextField2.text")); // NOI18N
        jTextField2.setEnabled(false);
        jTextField2.setName("jTextField2"); // NOI18N

        jTextField3.setEditable(false);
        jTextField3.setText(resourceMap.getString("jTextField3.text")); // NOI18N
        jTextField3.setEnabled(false);
        jTextField3.setName("jTextField3"); // NOI18N

        jButton3.setAction(actionMap.get("selectMultimediaFolder")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing" }));
        jComboBox1.setEnabled(false);
        jComboBox1.setName("jComboBox1"); // NOI18N

        jButton4.setAction(actionMap.get("addMultimediaFile")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N

        jButton5.setAction(actionMap.get("removeFileFromList")); // NOI18N
        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N

        jButton6.setAction(actionMap.get("cancel")); // NOI18N
        jButton6.setName("jButton6"); // NOI18N

        jButton7.setAction(actionMap.get("parseG7t")); // NOI18N
        jButton7.setName("jButton7"); // NOI18N

        jCheckBox1.setAction(actionMap.get("selectedFirstRadioButton")); // NOI18N
        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N

        jCheckBox2.setAction(actionMap.get("selectedSecondRadioButton")); // NOI18N
        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText(resourceMap.getString("jCheckBox2.text")); // NOI18N
        jCheckBox2.setName("jCheckBox2"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jButton8.setAction(actionMap.get("research")); // NOI18N
        jButton8.setName("jButton8"); // NOI18N

        jSpinner1.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        jSpinner1.setEditor(new javax.swing.JSpinner.DateEditor(jSpinner1, "dd.MM.yyyy HH:mm:ss"));
        jSpinner1.setName("jSpinner1"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jSeparator3.setName("jSeparator3"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jProgressBar1.setToolTipText(resourceMap.getString("jProgressBar1.toolTipText")); // NOI18N
        jProgressBar1.setDoubleBuffered(true);
        jProgressBar1.setName("jProgressBar1"); // NOI18N
        jProgressBar1.setStringPainted(true);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jToggleButton1.setAction(actionMap.get("selectModeWalk")); // NOI18N
        buttonGroup2.add(jToggleButton1);
        jToggleButton1.setIcon(resourceMap.getIcon("jToggleButton1.icon")); // NOI18N
        jToggleButton1.setName("jToggleButton1"); // NOI18N

        jToggleButton2.setAction(actionMap.get("selectModeBicycle")); // NOI18N
        buttonGroup2.add(jToggleButton2);
        jToggleButton2.setIcon(resourceMap.getIcon("jToggleButton2.icon")); // NOI18N
        jToggleButton2.setName("jToggleButton2"); // NOI18N

        jToggleButton10.setAction(actionMap.get("selectModeCar")); // NOI18N
        buttonGroup2.add(jToggleButton10);
        jToggleButton10.setIcon(resourceMap.getIcon("jToggleButton10.icon")); // NOI18N
        jToggleButton10.setName("jToggleButton10"); // NOI18N

        jToggleButton6.setAction(actionMap.get("selectModeSki")); // NOI18N
        buttonGroup2.add(jToggleButton6);
        jToggleButton6.setIcon(resourceMap.getIcon("jToggleButton6.icon")); // NOI18N
        jToggleButton6.setName("jToggleButton6"); // NOI18N

        jToggleButton7.setAction(actionMap.get("selectModeCanoe")); // NOI18N
        buttonGroup2.add(jToggleButton7);
        jToggleButton7.setIcon(resourceMap.getIcon("jToggleButton7.icon")); // NOI18N
        jToggleButton7.setName("jToggleButton7"); // NOI18N

        jToggleButton8.setAction(actionMap.get("selectModeBoat")); // NOI18N
        buttonGroup2.add(jToggleButton8);
        jToggleButton8.setIcon(resourceMap.getIcon("jToggleButton8.icon")); // NOI18N
        jToggleButton8.setName("jToggleButton8"); // NOI18N

        jToggleButton3.setAction(actionMap.get("selectModeParaglide")); // NOI18N
        buttonGroup2.add(jToggleButton3);
        jToggleButton3.setIcon(resourceMap.getIcon("jToggleButton3.icon")); // NOI18N
        jToggleButton3.setName("jToggleButton3"); // NOI18N

        jToggleButton9.setAction(actionMap.get("selectModeFly")); // NOI18N
        buttonGroup2.add(jToggleButton9);
        jToggleButton9.setIcon(resourceMap.getIcon("jToggleButton9.icon")); // NOI18N
        jToggleButton9.setName("jToggleButton9"); // NOI18N

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator4.setName("jSeparator4"); // NOI18N

        jToggleButton4.setAction(actionMap.get("readElevationsFromDevice")); // NOI18N
        buttonGroup4.add(jToggleButton4);
        jToggleButton4.setIcon(resourceMap.getIcon("jToggleButton4.icon")); // NOI18N
        jToggleButton4.setName("jToggleButton4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jToggleButton5.setAction(actionMap.get("readElevationsFromInternet")); // NOI18N
        buttonGroup4.add(jToggleButton5);
        jToggleButton5.setIcon(resourceMap.getIcon("jToggleButton5.icon")); // NOI18N
        jToggleButton5.setName("jToggleButton5"); // NOI18N

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator5.setName("jSeparator5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GMT -12", "GMT -11", "GMT -10", "GMT -09", "GMT -08", "GMT -07", "GMT -06", "GMT -05", "GMT -04", "GMT -03", "GMT -02", "GMT -01", "GMT", "GMT +01", "GMT +02", "GMT +03", "GMT +04", "GMT +05", "GMT +06", "GMT +07", "GMT +08", "GMT +09", "GMT +10", "GMT +11", "GMT +12" }));
        jComboBox2.setSelectedIndex(12);
        jComboBox2.setName("jComboBox2"); // NOI18N
        jComboBox2.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox2PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jRadioButton1.setAction(actionMap.get("formatTimeDaylightSaving")); // NOI18N
        buttonGroup3.add(jRadioButton1);
        jRadioButton1.setText(resourceMap.getString("jRadioButton1.text")); // NOI18N
        jRadioButton1.setName("jRadioButton1"); // NOI18N

        jRadioButton2.setAction(actionMap.get("formatTimeNonDayLightSaving")); // NOI18N
        buttonGroup3.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setName("jRadioButton2"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 854, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, 844, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 235, Short.MAX_VALUE)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jToggleButton7, 0, 0, Short.MAX_VALUE)
                                    .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jToggleButton8, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                                    .addComponent(jToggleButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jToggleButton3, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                                    .addComponent(jToggleButton10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jToggleButton9, 0, 0, Short.MAX_VALUE)
                                    .addComponent(jToggleButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jToggleButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(jRadioButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jRadioButton2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel5))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRadioButton1)
                                    .addComponent(jRadioButton2)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jToggleButton9))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jToggleButton1)
                                    .addComponent(jToggleButton2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jToggleButton7)
                                    .addComponent(jToggleButton8)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButton10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jToggleButton3))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jToggleButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                    .addComponent(jToggleButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton6)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox2PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox2PopupMenuWillBecomeInvisible

        formatTimeZone();     }//GEN-LAST:event_jComboBox2PopupMenuWillBecomeInvisible

    /**
     * Metóda určená na otvorenie súboru s gps údajmi g7t
     */
    @Action
    public void openFile() {
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(new filefilters.G7tFilter());
        chooser.setMultiSelectionEnabled(false);
        chooser.setCurrentDirectory(new File(SettingsLoader.getInstance().getG7tRecentFolder()));
        int returnVal = chooser.showOpenDialog(chooser);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            disableAllGUIEntities();
            g7tFile = chooser.getSelectedFile();
            if (g7tFile != null) {
                String strTemp = g7tFile.getAbsolutePath().substring(0, g7tFile.getAbsolutePath().lastIndexOf(System.getProperty("file.separator")));
                SettingsLoader.getInstance().setG7tRecentFolder(strTemp);
                SettingsLoader.getInstance().saveTempFile();
                jTextField1.setText(g7tFile.getAbsolutePath());
                jButton2.setEnabled(true);
                jTextField2.setEnabled(true);
                readG7t();
                if (!time.isEmpty()) {
                    jSpinner1.setValue(time.get(0));
                    jCheckBox2.setText("Use own creation date" + " (" + formEU.format(time.get(0)) + " - " + formEU.format(time.get(time.size() - 1)) + ")");
                }
            }
        }
        if (returnVal == JFileChooser.CANCEL_OPTION) {
        }



    }

    /**
     * Metóda na špecifikovanie výstupného tlv súboru
     */
    @Action
    public void selectDestination() {
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setSelectedFile(new File(jTextField1.getText().substring(0, jTextField1.getText().indexOf(".g7t")) + ".tlv"));
        chooser.addChoosableFileFilter(new filefilters.TlvFilter());
        chooser.setCurrentDirectory(new File(g7tFile.getPath().substring(0, g7tFile.toString().lastIndexOf(System.getProperty("file.separator")))));
        int returnVal = chooser.showSaveDialog(chooser);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            destFolder = chooser.getSelectedFile();
            if (destFolder != null) {
                jTextField2.setText(destFolder.getAbsolutePath());
                jToggleButton1.setEnabled(true);
                jToggleButton2.setEnabled(true);
                jToggleButton3.setEnabled(true);
                jToggleButton6.setEnabled(true);
                jToggleButton7.setEnabled(true);
                jToggleButton8.setEnabled(true);
                jToggleButton9.setEnabled(true);
                jToggleButton10.setEnabled(true);
            }
        }

        if (returnVal == JFileChooser.CANCEL_OPTION) {
        }
    }

    /**
     * Metóda určená na špecifikovanie priečinku, kde sa budú vyhľadávať multimediálne súbory
     */
    @Action
    public void selectMultimediaFolder() {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setCurrentDirectory(new File(SettingsLoader.getInstance().getMultimediaRecentFolder()));
        int returnVal = chooser.showOpenDialog(chooser);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            searchPath = chooser.getSelectedFile().getAbsolutePath();
            if (searchPath != null) {
                SettingsLoader.getInstance().setMultimediaRecentFolder(searchPath);
                jTextField3.setText(searchPath);
                jButton8.setEnabled(true);

            }
            if (returnVal == JFileChooser.CANCEL_OPTION) {
            }
        }
    }

    /**
     * Metóda určená na manálne pridanie multimediálneho súboru
     */
    @Action
    public void addMultimediaFile() {
        if (!jTextField1.getText().equals("Please select a *.gpx file ...")) {
            JFileChooser choose = new JFileChooser();
            if (jTextField3.getText().equals("Folder with multimedia files to search...")) {
                choose.setCurrentDirectory(new File(System.getProperty("user.home")));
            }
            if (!jTextField3.getText().equals("Folder with multimedia files to search...")) {
                choose.setCurrentDirectory(new File(jTextField3.getText()));
            }
            choose.setAcceptAllFileFilterUsed(false);
            choose.addChoosableFileFilter(new filefilters.MultimediaFilter());
            int returnVal = choose.showOpenDialog(choose);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File tempFile = choose.getSelectedFile();
                FileImpl tempF = null;
                if (tempFile.getAbsolutePath().toLowerCase().endsWith(".jpg") || tempFile.getAbsolutePath().toLowerCase().endsWith(".jpeg")) {

                    IImageMetadata metadata = null;
                    try {
                        metadata = Sanselan.getMetadata(choose.getSelectedFile());
                    } catch (ImageReadException e) {
                        System.out.println("ERROR: Cannot read EXIF metadata with Sanselan!!!");
                    } catch (IOException e) {
                        System.out.println("ERROR: Cannot read EXIF metadata with Sanselan!!!");
                    }
                    if (metadata instanceof JpegImageMetadata) {
                        JpegImageMetadata jpegMetadata = (JpegImageMetadata) metadata;
                        TiffField createDateField = jpegMetadata.findEXIFValue(TiffConstants.EXIF_TAG_CREATE_DATE);

                        if (createDateField == null) {
                            if (jCheckBox1.isSelected() && !jCheckBox2.isSelected()) {
                                tempF = new FileImpl(tempFile.getAbsolutePath(), new Date(tempFile.lastModified()));
                            } else {
                                Date userDate = (Date) jSpinner1.getValue();
                                tempF = new FileImpl(tempFile.getAbsolutePath(), userDate);
                            }
                        } else {
                            try {
                                String createDateStr = createDateField.getValueDescription();
                                createDateStr = createDateStr.substring(createDateStr.indexOf("'") + 1, createDateStr.lastIndexOf("'"));
                                DateFormat dateForm = new SimpleDateFormat("yyyy:MM:dd HH:mm:ss");
                                Date date = (Date) dateForm.parse(createDateStr);

                                if (jCheckBox1.isSelected() && !jCheckBox2.isSelected()) {
                                    tempF = new FileImpl(tempFile.getAbsolutePath(), date);
                                } else {
                                    Date userDate = (Date) jSpinner1.getValue();
                                    tempF = new FileImpl(tempFile.getAbsolutePath(), userDate);
                                }
                            } catch (ParseException ex) {
                                System.out.println("ERROR: Cannot parse creation date from picture!!!");
                            }
                        }
                        TiffImageMetadata exifMetadata = jpegMetadata.getExif();
                        if (exifMetadata != null) {
                            try {
                                TiffImageMetadata.GPSInfo gpsInfo = exifMetadata.getGPS();
                                if (gpsInfo != null) {
                                    tempF.setLatitude(String.valueOf(gpsInfo.getLatitudeAsDegreesNorth()));
                                    tempF.setLongitude(String.valueOf(gpsInfo.getLongitudeAsDegreesEast()));
                                }
                            } catch (ImageReadException ex) {
                                System.out.println("ERROR: Cannot read GPS metadata from jpeg EXIF!!! Using no coordinates!!!");
                            }
                        }
                    } else {
                        if (jCheckBox1.isSelected() && !jCheckBox2.isSelected()) {
                            tempF = new FileImpl(tempFile.getAbsolutePath(), new Date(tempFile.lastModified()));
                        } else {
                            Date userDate = (Date) jSpinner1.getValue();
                            tempF = new FileImpl(tempFile.getAbsolutePath(), userDate);
                        }
                    }

                } else {
                    if (jCheckBox1.isSelected() && !jCheckBox2.isSelected()) {
                        tempF = new FileImpl(tempFile.getAbsolutePath(), new Date(tempFile.lastModified()));
                    } else {
                        Date userDate = (Date) jSpinner1.getValue();
                        tempF = new FileImpl(tempFile.getAbsolutePath(), userDate);
                    }
                }

                boolean isAdded = false;
                for (int i = 0; i < files.size(); i++) {
                    if (files.get(i).getPath().equalsIgnoreCase(tempF.getPath())) {
                        isAdded = true;
                    }
                }
                if (isAdded == false) {
                    jButton5.setEnabled(true);
                    jComboBox1.setEnabled(true);
                    jComboBox1.removeAllItems();
                    files.add(tempF);
                    for (int i = 0; i < files.size(); i++) {
                        if (files.get(i).getPath().lastIndexOf(System.getProperty("file.separator")) > 3) {
                            String tempStr1 = files.get(i).getPath().substring(0, (files.get(i).getPath().lastIndexOf(System.getProperty("file.separator"))));
                            String tempStr2 = tempStr1.substring(tempStr1.lastIndexOf(System.getProperty("file.separator")));
                            String tempStr3 = files.get(i).getPath().substring((files.get(i).getPath().lastIndexOf(System.getProperty("file.separator"))));
                            if (files.get(i).getLatitude() != null && files.get(i).getLongitude() != null) {
                                jComboBox1.addItem("..." + tempStr2 + tempStr3 + " - " + files.get(i).getDate().toString() + " + GPS DATA");
                            } else {
                                jComboBox1.addItem("..." + tempStr2 + tempStr3 + " - " + files.get(i).getDate().toString());
                            }
                        } else {
                            if (files.get(i).getLatitude() != null && files.get(i).getLongitude() != null) {
                                jComboBox1.addItem(files.get(i).getPath() + " - " + files.get(i).getDate().toString() + " + GPS DATA");
                            } else {
                                jComboBox1.addItem(files.get(i).getPath() + " - " + files.get(i).getDate().toString());
                            }
                        }
                    }
                }
            }

            if (returnVal == JFileChooser.CANCEL_OPTION) {
            }
        } else {
            JOptionPane.showMessageDialog(this, "You haven't selected a gpx file, so you cannot add a multimedia file!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metóda určená na vymazanie položky zo zoznamu relevantných multimediálnych súborov
     */
    @Action
    public void removeFileFromList() {
        if (!files.isEmpty()) {
            int index = jComboBox1.getSelectedIndex();
            jComboBox1.removeAllItems();
            files.remove(index);
            for (int i = 0; i < files.size(); i++) {
                if (files.get(i).getPath().lastIndexOf(System.getProperty("file.separator")) > 3) {
                    String tempStr1 = files.get(i).getPath().substring(0, (files.get(i).getPath().lastIndexOf(System.getProperty("file.separator"))));
                    String tempStr2 = tempStr1.substring(tempStr1.lastIndexOf(System.getProperty("file.separator")));
                    String tempStr3 = files.get(i).getPath().substring((files.get(i).getPath().lastIndexOf(System.getProperty("file.separator"))));
                    if (files.get(i).getLatitude() != null && files.get(i).getLongitude() != null) {
                        jComboBox1.addItem("..." + tempStr2 + tempStr3 + " - " + files.get(i).getDate().toString() + " + GPS DATA");
                    } else {
                        jComboBox1.addItem("..." + tempStr2 + tempStr3 + " - " + files.get(i).getDate().toString());
                    }
                } else {
                    if (files.get(i).getLatitude() != null && files.get(i).getLongitude() != null) {
                        jComboBox1.addItem(files.get(i).getPath() + " - " + files.get(i).getDate().toString() + " + GPS DATA");
                    } else {
                        jComboBox1.addItem(files.get(i).getPath() + " - " + files.get(i).getDate().toString());
                    }
                }
            }
        }
        if (files.isEmpty()) {
            jButton5.setEnabled(false);
            jComboBox1.setEnabled(false);
            jCheckBox1.setSelected(false);
        }
    }

    /**
     * Metóda určená na zrušenie operácií a celého okna parsera
     */
    @Action
    public void cancel() {
        if (thread1.isAlive()) {
            thread1.stop();
        }
        if (thread.isAlive()) {
            thread.stop();
        }
        this.dispose();
    }

    /**
     * Metóda určená na vygenerovanie vystupného súboru formátu .tlv
     */
    @Action
    public void parseG7t() {
        if (g7tFile != null && destFolder != null) {
            if (destFolder.getAbsolutePath().toLowerCase().endsWith(".tlv")) {
                path = destFolder.getAbsolutePath();
            }
            if (!destFolder.getAbsolutePath().toLowerCase().endsWith(".tlv")) {
                path = destFolder.getAbsolutePath() + ".tlv";
            }

            File f = new File(path);

            if (f.exists()) {
                try {
                    f.delete();
                    f.createNewFile();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error: Cannot create *.tlv file!!!", "Error", JOptionPane.ERROR_MESSAGE);
                    this.cancel();
                }
            }

            if (!f.exists()) {
                try {
                    f.createNewFile();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error: Cannot create *.tlv file!!!", "Error", JOptionPane.ERROR_MESSAGE);
                    this.cancel();
                }
            }
            try {
                DocumentBuilderFactory DBF1 = DocumentBuilderFactory.newInstance();
                DocumentBuilder DB1 = DBF1.newDocumentBuilder();
                org.w3c.dom.Document document = DB1.newDocument();
                org.w3c.dom.Element rootElement = document.createElement("TLV");
                document.appendChild(rootElement);
                org.w3c.dom.Element rootElement3 = document.createElement("SYSTEM");
                rootElement3.appendChild(document.createTextNode(os));
                rootElement.appendChild(rootElement3);
                org.w3c.dom.Element rootElement2 = document.createElement("FILES");
                if (files.isEmpty() == true) {
                    rootElement2.appendChild(document.createTextNode("null"));
                }
                rootElement.appendChild(rootElement2);

                for (int i = 0; i < files.size(); i++) {
                    org.w3c.dom.Element em = document.createElement("File_entity");
                    rootElement2.appendChild(em);
                    org.w3c.dom.Element em1 = document.createElement("path");
                    em1.appendChild(document.createTextNode(files.get(i).getPath().toString()));
                    em.appendChild(em1);

                    org.w3c.dom.Element em2 = document.createElement("creation_date");
                    em2.appendChild(document.createTextNode(String.valueOf(files.get(i).getDate().getTime())));
                    em.appendChild(em2);

                    org.w3c.dom.Element emr = document.createElement("gps_latitude");
                    if (files.get(i).getLatitude() != null) {
                        emr.appendChild(document.createTextNode(files.get(i).getLatitude()));
                    } else {
                        emr.appendChild(document.createTextNode("null"));
                    }
                    em.appendChild(emr);

                    org.w3c.dom.Element emr1 = document.createElement("gps_longitude");
                    if (files.get(i).getLongitude() != null) {
                        emr1.appendChild(document.createTextNode(files.get(i).getLongitude()));
                    } else {
                        emr1.appendChild(document.createTextNode("null"));
                    }
                    em.appendChild(emr1);

                    org.w3c.dom.Element emr2 = document.createElement("gps_elevation");
                    if (files.get(i).getElevation() != null) {
                        emr2.appendChild(document.createTextNode(files.get(i).getElevation()));
                    } else {
                        emr2.appendChild(document.createTextNode("null"));
                    }
                    em.appendChild(emr2);

                }

                org.w3c.dom.Element rootElement1 = document.createElement("COORDINATES");
                rootElement.appendChild(rootElement1);

                org.w3c.dom.Element element2 = document.createElement("Track_Type");
                element2.appendChild(document.createTextNode(trackType));
                rootElement1.appendChild(element2);

                org.w3c.dom.Element element3 = document.createElement("Elevations_type");
                if (isLoadedElevationsFromServer == true) {
                    element3.appendChild(document.createTextNode("INTERNET"));
                } else {
                    element3.appendChild(document.createTextNode("DEVICE"));
                }
                rootElement1.appendChild(element3);

                for (int i = 0; i < latitude.size(); i++) {
                    org.w3c.dom.Element em = document.createElement("TrackPoint");
                    rootElement1.appendChild(em);
                    org.w3c.dom.Element em1 = document.createElement("Latitude");
                    em1.appendChild(document.createTextNode(latitude.get(i)));
                    em.appendChild(em1);

                    org.w3c.dom.Element em2 = document.createElement("Longitude");
                    em2.appendChild(document.createTextNode(longitude.get(i)));
                    em.appendChild(em2);

                    org.w3c.dom.Element em3 = document.createElement("Device_Elevation");
                    em3.appendChild(document.createTextNode(deviceElevation.get(i)));
                    em.appendChild(em3);

                    if (isLoadedElevationsFromServer == true) {
                        org.w3c.dom.Element em3aPol = document.createElement("Internet_Elevation");
                        em3aPol.appendChild(document.createTextNode(serverElevation.get(i)));
                        em.appendChild(em3aPol);
                    }

                    org.w3c.dom.Element em4 = document.createElement("Time");
                    StringBuilder str = new StringBuilder();
                    str = str.append(time.get(i).getTime());
                    String tempStr = str.toString();
                    em4.appendChild(document.createTextNode(tempStr));
                    em.appendChild(em4);
                }
                TransformerFactory TF = TransformerFactory.newInstance();
                Transformer T = TF.newTransformer();
                DOMSource source = new DOMSource(document);
                StreamResult result = new StreamResult(f);
                T.transform(source, result);
                JOptionPane.showMessageDialog(this, "Info: File " + g7tFile.getName() + " was successfully parsed!!!", "Successfully done", JOptionPane.INFORMATION_MESSAGE);
                DB1.reset();
                this.cancel();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: Cannot create *.tlv file!!!", "Error", JOptionPane.ERROR_MESSAGE);
                this.cancel();
            }


        }
    }

    /**
     * Metóda určená na načítanie vstupného súboru formátu .g7t, a výber GPS informácií
     */
    @Action
    public void readG7t() {

        latitude.clear();
        longitude.clear();
        deviceElevation.clear();

        serverElevation = null;

        time.clear();
        files.clear();
        track.clear();
        timeZone = 0;
        buttonGroup2.clearSelection();
        buttonGroup4.clearSelection();

        FileInputStream FIS = null;
        try {
            latitude.clear();
            longitude.clear();
            deviceElevation.clear();
            time.clear();
            files.clear();
            track.clear();
            Scanner reader = new Scanner(g7tFile);
            String line = reader.nextLine();

            while (!line.startsWith("D ")) {
                line = reader.nextLine();
            }
            if (line.endsWith("WGS-84")) {

                while (!line.startsWith("N ")) {
                    line = reader.nextLine();
                }
                while (reader.hasNextLine()) {
                    line = reader.nextLine();
                    if (line.startsWith("T ")) {
                        String[] comp = line.split(" ");

                        double lat0 = Double.parseDouble(comp[2].substring(1));
                        double lat1 = Double.parseDouble(comp[3]) / 60;
                        float lat = (float) (lat0 + lat1);
                        latitude.add(String.valueOf(lat));

                        double lon0 = Double.parseDouble(comp[4].substring(1));
                        double lon1 = Double.parseDouble(comp[5]) / 60;
                        float lon = (float) (lon0 + lon1);
                        longitude.add(String.valueOf(lon));


                        Date tempDate = (Date) form.parse(comp[7] + " " + comp[8] + " " + comp[9] + " " + comp[10]);
                        tempDate.setHours(tempDate.getHours() + 1);
                        time.add(tempDate);

                        String elev = comp[11].substring(1, comp[11].lastIndexOf(";"));
                        deviceElevation.add(elev);
                    } else {
                    }
                }

                for (int i = 0; i < latitude.size(); i++) {
                    TrackPointImpl tempTP = new TrackPointImpl();
                    tempTP.setLatitude(Double.parseDouble(latitude.get(i)));
                    tempTP.setLongitude(Double.parseDouble(longitude.get(i)));
                    tempTP.setDeviceElevation(Integer.parseInt(deviceElevation.get(i).substring(0, deviceElevation.get(i).indexOf("."))));
                    tempTP.setTime(time.get(i));
                    track.add(tempTP);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Error: File " + g7tFile.getName() + " has bad GPS coorinates format (It must be WGS-84) !!!", "Error", JOptionPane.ERROR_MESSAGE);
                this.dispose();
            }

        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Error: Bad date format in file " + g7tFile.getName() + " !!!", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error: Cannot read file " + g7tFile.getName() + " !!!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metóda určená na automatické prehľadávanie vopred špecifikovaného priečinka a vyberanie relevantných multimediálnych súborov
     */
    @Action
    public void research() {
        if (thread.isAlive()) {
            thread.stop();
            jButton8.setText("Search for related multimedia files");
            jLabel4.setVisible(false);
            jProgressBar1.setVisible(false);
            jProgressBar1.setIndeterminate(false);
            jToggleButton4.setEnabled(true);
            jToggleButton5.setEnabled(true);
            this.setCursor(Cursor.getDefaultCursor());
        } else {
            jButton7.setEnabled(false);
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            jProgressBar1.setVisible(true);
            jLabel4.setVisible(true);
            jToggleButton4.setEnabled(false);
            jToggleButton5.setEnabled(false);

            thread = new Thread(new searchMultimediaFilesFromPC());
            thread.start();

            jButton8.setText("Stop searching for related multimedia files");
            jProgressBar1.setStringPainted(false);

            jProgressBar1.setIndeterminate(true);
            jLabel4.setText("Searching for Multimedia Files...");


            this.setCursor(Cursor.getDefaultCursor());
        }
    }

    /**
     * Metóda určená na špecifikovanie systémových časov vytvorenia súborov pri manuálnom pridávaní multimediálnych súborov
     */
    @Action
    public void selectedFirstRadioButton() {
        jSpinner1.setEnabled(false);
        jButton4.setEnabled(true);
    }

    /**
     * Metóda určená na špecifikovanie používateľských časov vytvorenia súborov pri manuálnom pridávaní multimediálnych súborov
     */
    @Action
    public void selectedSecondRadioButton() {
        jSpinner1.setValue(time.get(0));
        jSpinner1.setEnabled(true);
        jButton4.setEnabled(true);
    }

    /**
     * Výber metódy kráčania
     */
    @Action
    public void selectModeWalk() {

        jToggleButton4.setEnabled(true);
        jToggleButton5.setEnabled(true);
        trackType = "Walk";

    }

    /**
     * Výber metódy dopravného prostriedku Bicykel
     */
    @Action
    public void selectModeBicycle() {

        jToggleButton4.setEnabled(true);
        jToggleButton5.setEnabled(true);
        trackType = "Bicycle";

    }

    /**
     * Výber metódy  dopravného prostriedku Auto
     */
    @Action
    public void selectModeCar() {

        jToggleButton4.setEnabled(true);
        jToggleButton5.setEnabled(true);
        trackType = "Car";

    }

    /**
     * Výber metódy lyžovania sa
     */
    @Action
    public void selectModeSki() {
        jToggleButton4.setEnabled(true);
        jToggleButton5.setEnabled(true);
        trackType = "Ski";
    }

    /**
     * Výber metódy dopravného prostriedku Kanoe
     */
    @Action
    public void selectModeCanoe() {

        jToggleButton4.setEnabled(true);
        jToggleButton5.setEnabled(true);
        trackType = "Canoe";

    }

    /**
     * Výber metódy dopravného prostriedku Loď
     */
    @Action
    public void selectModeBoat() {

        jToggleButton4.setEnabled(true);
        jToggleButton5.setEnabled(true);
        trackType = "Boat";

    }

    /**
     * Výber metódy dopravného prostriedku Paraglide (Padák)
     */
    @Action
    public void selectModeParaglide() {

        jToggleButton4.setEnabled(true);
        jToggleButton5.setEnabled(true);
        trackType = "Paraglide";

    }

    /**
     * Výber metódy dopravného prostriedku Lietadlo
     */
    @Action
    public void selectModeFly() {

        jToggleButton4.setEnabled(true);
        jToggleButton5.setEnabled(true);
        trackType = "Airplane";

    }

    /**
     * Metóda určená na načítavanie nadmorských výšok z mapového servera
     */
    @Action
    public void readElevationsFromInternet() {
        if (thread1.isAlive()) {

            thread1.stop();

        }

        jButton7.setEnabled(false);
        jButton8.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(false);
        jSpinner1.setEnabled(false);
        jComboBox1.setEnabled(false);
        jComboBox2.setEnabled(false);
        jRadioButton1.setEnabled(false);
        jRadioButton2.setEnabled(false);
        jButton3.setEnabled(false);
        this.setCursor(Cursor.WAIT_CURSOR);

        jProgressBar1.setVisible(true);
        jProgressBar1.setStringPainted(true);
        jLabel4.setText("Loading elevations from server... ");
        jLabel4.setVisible(true);

        thread1 = new Thread(new getElevationsFromURL());
        thread1.start();

        this.setCursor(Cursor.DEFAULT_CURSOR);
    }

    /**
     * Metóda určená na načítavanie nadmorských výšok z GPS zariadenia
     */
    @Action
    public void readElevationsFromDevice() {

        if (thread1.isAlive()) {
            thread1.stop();
            jProgressBar1.setVisible(false);
            jLabel4.setVisible(false);
            serverElevation = null;
        }

        isLoadedElevationsFromServer = false;
        jButton3.setEnabled(true);
        jButton7.setEnabled(true);
        jTextField3.setEnabled(true);
        jCheckBox1.setEnabled(true);
        jCheckBox2.setEnabled(true);

        jComboBox2.setEnabled(true);
        jRadioButton1.setEnabled(true);
        jRadioButton2.setEnabled(true);
        if (!jTextField3.getText().equals("Folder with multimedia files to search...")) {
            jComboBox1.setEnabled(true);
            jButton8.setEnabled(true);
        }
        if (jCheckBox1.isSelected() || jCheckBox2.isSelected()) {
            jButton5.setEnabled(true);
            jButton4.setEnabled(true);
        }
    }

    /**
     * Metóda určená na časovú korektúru pre časovú zónu
     */
    public void formatTimeZone() {
        int newTimeZone = 0;
        switch (jComboBox2.getSelectedIndex()) {
            case 0:
                newTimeZone = (-12);
                break;
            case 1:
                newTimeZone = (-11);
                break;
            case 2:
                newTimeZone = (-10);
                break;
            case 3:
                newTimeZone = (-9);
                break;
            case 4:
                newTimeZone = (-8);
                break;
            case 5:
                newTimeZone = (-7);
                break;
            case 6:
                newTimeZone = (-6);
                break;
            case 7:
                newTimeZone = (-5);
                break;
            case 8:
                newTimeZone = (-4);
                break;
            case 9:
                newTimeZone = (-3);
                break;
            case 10:
                newTimeZone = (-2);
                break;
            case 11:
                newTimeZone = (-1);
                break;
            case 13:
                newTimeZone = (1);
                break;
            case 14:
                newTimeZone = (2);
                break;
            case 15:
                newTimeZone = (3);
                break;
            case 16:
                newTimeZone = (4);
                break;
            case 17:
                newTimeZone = (5);
                break;
            case 18:
                newTimeZone = (6);
                break;
            case 19:
                newTimeZone = (7);
                break;
            case 20:
                newTimeZone = (8);
                break;
            case 21:
                newTimeZone = (9);
                break;
            case 22:
                newTimeZone = (10);
                break;
            case 23:
                newTimeZone = (11);
                break;
            case 24:
                newTimeZone = (12);
                break;
        }


        for (int i = 0; i < time.size(); i++) {
            time.get(i).setHours(time.get(i).getHours() + (newTimeZone - timeZone));

        }
        timeZone = newTimeZone;

        jCheckBox2.setText("Use own creation date" + " (" + formEU.format(time.get(0)) + " - " + formEU.format(time.get(time.size() - 1)) + ")");
    }

    /**
     * Metóda pre výber letného časového režimu
     */
    @Action
    public void formatTimeDaylightSaving() {
        if (daylightSaving.equals("non-daylight")) {
            for (int i = 0; i < time.size(); i++) {
                time.get(i).setHours(time.get(i).getHours() + 1);
            }
            daylightSaving = "daylight";
        }
        jCheckBox2.setText("Use own creation date" + " (" + formEU.format(time.get(0)) + " - " + formEU.format(time.get(time.size() - 1)) + ")");
    }

    /**
     * Metóda pre výber zimného časového režimu
     */
    @Action
    public void formatTimeNonDayLightSaving() {
        if (daylightSaving.equals("daylight")) {
            for (int i = 0; i < time.size(); i++) {
                time.get(i).setHours(time.get(i).getHours() - 1);
            }
            daylightSaving = "non-daylight";
        }
        jCheckBox2.setText("Use own creation date" + " (" + formEU.format(time.get(0)) + " - " + formEU.format(time.get(time.size() - 1)) + ")");
    }

    /**
     * Metóda určená na zablokovanie jednoltlivých prvkov GUI
     */
    public void disableAllGUIEntities() {

        isLoadedElevationsFromServer = false;

        jProgressBar1.setVisible(false);
        jLabel4.setVisible(false);
        jButton2.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        jButton8.setEnabled(false);

        jTextField2.setEnabled(false);
        jTextField2.setText("Select destination file ...");

        jTextField3.setEnabled(false);
        jTextField3.setText("Folder with multimedia files to search...");

        jCheckBox2.setEnabled(false);
        jCheckBox2.setSelected(false);

        jCheckBox2.setEnabled(false);
        jCheckBox1.setSelected(false);

        jSpinner1.setEnabled(false);

        jComboBox1.removeAllItems();
        files.clear();
        jComboBox1.setEnabled(false);

        jComboBox2.setEnabled(false);
        jComboBox2.setSelectedIndex(12);

        jToggleButton1.setEnabled(false);
        jToggleButton1.setSelected(false);

        jToggleButton2.setEnabled(false);
        jToggleButton2.setSelected(false);

        jToggleButton3.setEnabled(false);
        jToggleButton3.setSelected(false);

        jToggleButton4.setEnabled(false);
        jToggleButton4.setSelected(false);

        jToggleButton5.setEnabled(false);
        jToggleButton5.setSelected(false);

        jToggleButton6.setEnabled(false);
        jToggleButton6.setSelected(false);

        jToggleButton7.setEnabled(false);
        jToggleButton7.setSelected(false);

        jToggleButton8.setEnabled(false);
        jToggleButton8.setSelected(false);

        jToggleButton9.setEnabled(false);
        jToggleButton9.setSelected(false);

        jToggleButton10.setEnabled(false);
        jToggleButton10.setSelected(false);

        jRadioButton1.setEnabled(false);
        jRadioButton2.setEnabled(false);
        jRadioButton2.setSelected(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    public static final javax.swing.JProgressBar jProgressBar1 = new javax.swing.JProgressBar();
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton10;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JToggleButton jToggleButton8;
    private javax.swing.JToggleButton jToggleButton9;
    // End of variables declaration//GEN-END:variables

    class getElevationsFromURL implements Runnable {

        public void run() {
            serverElevation = elevationLoader.reclaimElevations(track);

            jButton3.setEnabled(true);
            jButton7.setEnabled(true);
            jTextField3.setEnabled(true);
            jCheckBox1.setEnabled(true);
            jCheckBox2.setEnabled(true);

            jComboBox2.setEnabled(true);
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
            if (!jTextField3.getText().equals("Folder with multimedia files to search...")) {
                jComboBox1.setEnabled(true);
                jButton8.setEnabled(true);
            }
            if (jCheckBox1.isSelected() || jCheckBox2.isSelected()) {
                jButton5.setEnabled(true);
                jButton4.setEnabled(true);
            }
            isLoadedElevationsFromServer = true;

            jLabel4.setText("Finished");
        }
    }

    class searchMultimediaFilesFromPC implements Runnable {

        public void run() {


            int tempCount = 0;
            int tempCount1 = files.size();
            List<FileImpl> tempList = new ArrayList<FileImpl>();
            tempList.addAll(files);
            files.clear();
            MultimediaSearcher searcher = new MultimediaSearcher(g7tFile.getAbsolutePath(), searchPath, track);
            files = searcher.startSearch();
            for (int i = 0; i < tempList.size(); i++) {
                for (int j = 0; j < files.size(); j++) {
                    if (files.get(j).getPath().equalsIgnoreCase(tempList.get(i).getPath())) {
                        tempList.remove(i);
                    }
                }
            }
            tempCount = files.size() + tempList.size() - tempCount1;
            files.addAll(tempList);
            jComboBox1.removeAllItems();
            for (int i = 0; i < files.size(); i++) {
                if (files.get(i).getPath().lastIndexOf(System.getProperty("file.separator")) > 3) {
                    String tempStr1 = files.get(i).getPath().substring(0, (files.get(i).getPath().lastIndexOf(System.getProperty("file.separator"))));
                    String tempStr2 = tempStr1.substring(tempStr1.lastIndexOf(System.getProperty("file.separator")));
                    String tempStr3 = files.get(i).getPath().substring((files.get(i).getPath().lastIndexOf(System.getProperty("file.separator"))));
                    if (files.get(i).getLatitude() != null && files.get(i).getLongitude() != null) {
                        jComboBox1.addItem("..." + tempStr2 + tempStr3 + " - " + files.get(i).getDate().toString() + " + GPS DATA");
                    } else {
                        jComboBox1.addItem("..." + tempStr2 + tempStr3 + " - " + files.get(i).getDate().toString());
                    }
                } else {
                    if (files.get(i).getLatitude() != null && files.get(i).getLongitude() != null) {
                        jComboBox1.addItem(files.get(i).getPath() + " - " + files.get(i).getDate().toString() + " + GPS DATA");
                    } else {
                        jComboBox1.addItem(files.get(i).getPath() + " - " + files.get(i).getDate().toString());
                    }
                }
            }



            if (!files.isEmpty()) {
                jComboBox1.setEnabled(true);
                jButton6.setEnabled(true);
            }

            jProgressBar1.setIndeterminate(false);
            jLabel4.setText("Finished");

            jProgressBar1.setVisible(false);
            jLabel4.setVisible(false);

            jButton8.setText("Search for related multimedia files");

            JOptionPane.showMessageDialog(null, "Info: " + tempCount + " multimedia files were added.", "Info", JOptionPane.INFORMATION_MESSAGE);

            jButton7.setEnabled(true);
            jToggleButton4.setEnabled(true);
            jToggleButton5.setEnabled(true);


        }
    }
}
